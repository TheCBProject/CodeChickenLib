buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = "https://repo.spongepowered.org/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id "net.covers1624.signing" version '1.1.4'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: "org.spongepowered.mixin"
apply from: "gradle/scripts/langcheck.gradle"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

group = 'codechicken'
archivesBaseName = 'CodeChickenLib'

sourceSets.main.resources.srcDirs += "src/main/generated"

file('build.properties').withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

def signProps = [:]
if (System.getenv("KEY_STORE")) {
    println "Using Env variables for jar signing."
    signProps['keyStore'] = System.getenv("KEY_STORE")
    file(System.getenv("KEY_STORE_PROPS")).withReader {
        def props = new Properties()
        props.load(it)
        signProps.putAll(props)
    }
} else if (project.hasProperty('keyStore')) {
    println "Using Project properties for jar signing."
    signProps['keyStore'] = project.getProperty('keyStore')
    signProps['storePass'] = project.getProperty('keyStorePass')
    signProps['alias'] = project.getProperty('keyStoreAlias')
    signProps['keyPass'] = project.getProperty('keyStoreKeyPass')
} else {
    println 'No signing secrets found, build will not be signed.'
}

config.mod_version = "${config.mod_version}." + (System.getenv("BUILD_NUMBER") ?: "1")
version = "${config.mc_version}-${config.mod_version}"
println "Starting build of ${archivesBaseName}, Version: ${config.mod_version}"
println "Using Forge: ${config.forge_version}, for Minecraft: ${config.mc_version}, with Mappings: ${config.mappings}"

minecraft {
    mappings channel: 'official', version: config.mc_version
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
    runs {
        client {
            workingDirectory file('run')
            mods { codechickenlib { source sourceSets.main } }
        }
        server {
            workingDirectory file('run')
            mods { codechickenlib { source sourceSets.main } }
        }
        data {
            workingDirectory file('run')
            args '--mod', 'codechickenlib', '--all', '--output', file("src/main/generated"), '--existing', file("src/main/resources")
            mods { codechickenlib { source sourceSets.main } }
        }
    }
}

mixin {
    add(sourceSets.main, "mixins.codechickenlib.refmap.json")
}

processResources { task ->
    inputs.property 'mod_version', config.mod_version
    inputs.property 'mc_version', config.mc_version

    from(sourceSets.main.resources.srcDirs) { spec ->
        spec.include 'META-INF/mods.toml'
        task.doFirst {
            spec.expand 'version': config.mod_version,
                    'mc_version': config.mc_version,
                    'forge_version': config.forge_version
        }
    }
}

configurations {
    annotationProcessor.extendsFrom minecraft
}

repositories {
    mavenLocal()
    maven { url = "https://maven.covers1624.net/" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.mc_version}-${config.forge_version}"
    testCompile 'junit:junit:4.12'
}

signing {
    if (!signProps.isEmpty()) {
        jars {
            sign jar
            after 'reobfJar'

            keyStore = signProps.keyStore
            alias = signProps.alias
            storePass = signProps.storePass
            keyPass = signProps.keyPass
        }
    }
}

def commonManifest = {
    attributes 'Specification-Title': archivesBaseName
    attributes 'Specification-Vendor': 'covers1624'
    attributes 'Specification-Version': "1"
    attributes 'Implementation-Title': archivesBaseName
    attributes 'Implementation-Vendor': 'covers1624'
    attributes 'Implementation-Version': version
    attributes 'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    attributes 'MixinConfigs': 'mixins.codechickenlib.json,mixins.codechickenlib.optifine.json'
}

jar {
    finalizedBy 'reobfJar'
    classifier = 'universal'
    manifest commonManifest
    from file("LICENSE")
}

task srcJar(type: Jar) {
    build.dependsOn it
    from sourceSets.main.allSource
    classifier = 'sources'
    from file("LICENSE")
}

task deobfJar(type: Jar) {
    build.dependsOn it
    from sourceSets.main.output
    classifier = 'deobf'
    manifest commonManifest
    from file("LICENSE")
}

publishing {
    repositories {
        if (System.getenv('MAVEN_PASS')) {
            maven {
                url "https://maven-upload.covers1624.net/"
                credentials {
                    username 'covers1624'
                    password System.getenv('MAVEN_PASS')
                }
            }
        }
    }
    publications {
        CodeChickenLib(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
            artifact srcJar
            artifact deobfJar

            pom {
                name = archivesBaseName
                description = archivesBaseName
                //The publish plugin doesnt like GString's here apparently..
                url = "https://github.com/TheCBProject/${archivesBaseName}".toString()
                scm {
                    url = "https://github.com/TheCBProject/${archivesBaseName}".toString()
                    connection = "scm:git:git://github.com/TheCBProject/${archivesBaseName}.git".toString()
                    connection = "scm:git:git@github.com:TheCBProject/${archivesBaseName}.git".toString()
                }

                issueManagement {
                    system = 'github'
                    url = "https://github.com/TheCBProject/${archivesBaseName}/issues".toString()
                }
                licenses {
                    license {
                        name = "GNU Lesser Public License (GPL), Version 2.1"
                        url = "https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt"
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'covers1624'
                        name = 'covers1624'
                    }
                }
                developers {
                    developer {
                        id = 'chicken-bones'
                        name = 'chicken-bones'
                    }
                }
            }
        }
    }
}

/**
 * Polls the 'compile' configuration for a dependency with the given module name
 * and resolves, and returns its version. E.g: '1.2.+' will resolve to '1.2.3.4'
 *
 * @param module The module to search for.
 * @param chop If the string should be chopped on the last '-' in its string.
 * @param configuration The name of the configuration to search.
 * @param errorMissing If an error should be thrown if it can't be found.
 * @return The version string, '0' if 'errorMissing' is false and nothing was found.
 */
def resolve(module, chop = true, configuration = 'compile', errorMissing = true) {
    //Copy and lenient resolve the configuration, Forge cant be resolved at this time so lenient is required.
    def filtered = configurations.getByName(configuration).copy().incoming.artifactView({ it.lenient = true }).artifacts
            .findAll { it.id.componentIdentifier.module == module }
            .collect { it.id.componentIdentifier.version }
    if (filtered.size() > 1) {
        println "WARNING: Found ${filtered.size()} Dependencies with ModuleName '${module}' in configuration '${configuration.name}'"
    }
    if (errorMissing && filtered.isEmpty()) {
        throw new RuntimeException("Failed resolve dependency version for '${module}'")
    }
    if (filtered.isEmpty()) return "0"
    def version = filtered.first() as String
    if (chop) {
        def idx = version.lastIndexOf('-')
        return version.substring(idx + 1)
    }
    return version
}

